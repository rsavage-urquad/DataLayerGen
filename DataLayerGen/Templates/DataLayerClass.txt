using System;
using System.Collections.Generic;
using System.Data;

namespace ===To Be Populated===
{
    public class {{Table}}Dl
    {
        #region Public Methods

        /// <summary>
        /// {{Table}}GetById() - Retrieve the requested item by Id and retuens a populated object.
        /// </summary>
        /// <param name="cs">Connection String</param>
        {{Each|IdCols|/// <param name="[[CamelColName]]">Id of item to retrieve</param>}}
        {{SectionIf|ActivePresent}}
        /// <param name="includeInactive">Should inactive items be returned? (true/false)</param>
        {{/SectionIf}}
        /// <returns>Populated object or null</returns>
        public {{Table}} {{Table}}GetById(string cs, {{CamelIdColParameters}}{{If|ActivePresent|, bool includeInactive = false}})
        {
            {{Table}} result = null;

            // Prepare and Call the SP
            using (Sql sql = new Sql(cs, "{{Schema}}.{{Table}}GetById"))
            {
                // Add Parameters
                {{Each|IdCols|sql.SetParameter("[[ColName]]", [[CamelColName]]);}}
                {{SectionIf|ActivePresent}}
                sql.SetParameter("IncludeInactive", includeInactive);
                {{/SectionIf}}

                using (var table = sql.GetTable())
                {
                    // Check for data
                    if (table != null)
                    {
                        foreach (DataRow dr in table.Rows)  // Should only be one
                        {
                            result = new {{Table}}();
                            PopulateObject(dr, result);
                        }
                    }
                }
            }

            return result;
        }

        /// <summary>
        /// {{Table}}List() - Returns a list of all entities in the table
        /// </summary>
        /// <param name="cs">Connection String</param>
        {{SectionIf|ActivePresent}}
        /// <param name="includeInactive">Should inactive items be returned? (true/false)</param>
        {{/SectionIf}}
        /// <returns></returns>
        public List<{{Table}}> {{Table}}List(string cs{{If|ActivePresent|, bool includeInactive = false}})
        {
            List<{{Table}}> results = new List<{{Table}}>();

            // Prepare and Call the SP
            using (Sql sql = new Sql(cs, "{{Schema}}.{{Table}}List"))
            {
                {{SectionIf|ActivePresent}}
                // Add Parameters
                sql.SetParameter("IncludeInactive", includeInactive);

                {{/SectionIf}}
                using (var table = sql.GetTable())
                {
                    if (table != null)
                    {
                        foreach (DataRow dr in table.Rows)
                        {
                            {{Table}} obj = new {{Table}}();
                            PopulateObject(dr, obj);
                            results.Add(obj);
                        }
                    }
                }
            }

            return results;
        }

        /// <summary>
        /// {{Table}}ListByName() - Returns a list of entities for the requested Name
        /// </summary>
        /// <param name="cs">Connection String</param>
        /// <param name="{{CamelNameColName}}">{{Table}} name to retrieve</param>
        {{SectionIf|ActivePresent}}
        /// <param name="includeInactive">Should inactive items be returned? (true/false)</param>
        {{/SectionIf}}
        /// <returns></returns>
        public List<{{Table}}> {{Table}}ListByName(string cs, {{NameColCodeType}} {{CamelNameColName}}{{If|ActivePresent|, bool includeInactive = false}})
        {
            List<{{Table}}> results = new List<{{Table}}>();

            // Prepare and Call the SP
            using (Sql sql = new Sql(cs, "{{Schema}}.{{Table}}ListByName"))
            {
                // Add Parameters
                sql.SetParameter("{{NameColName}}", {{CamelNameColName}});
                {{SectionIf|ActivePresent}}
                sql.SetParameter("IncludeInactive", includeInactive);
                {{/SectionIf}}

                using (var table = sql.GetTable())
                {
                    if (table != null)
                    {
                        foreach (DataRow dr in table.Rows)
                        {
                            {{Table}} obj = new {{Table}}();
                            PopulateObject(dr, obj);
                            results.Add(obj);
                        }
                    }
                }
            }

            return results;
        }

        /// <summary>
        /// {{Table}}Insert() - Inserts an Entity Object
        /// </summary>
        /// <param name="{{CamelTable}}Obj">{{Table}} object containing data to insert</param>
        /// <returns>
        ///     0 = Success
        ///     98 - No results
        ///     99 = Exception during Insert
        /// </returns>
        public int {{Table}}Insert(string cs, {{Table}} {{CamelTable}}Obj)
        {
            int retCode = 0;
            {{SectionIf|IdIsIdentity}}
            int insertedId = 0;
            {{/SectionIf}}
            using (Sql sql = new Sql(cs, "{{Schema}}.{{Table}}Ins"))
            {
	            {{SectionIf|IdIsNotIdentity}}
	            {{Each|IdCols|sql.SetParameter("[[ColName]]", {{CamelTable}}Obj.[[ColName]]);}}
	            {{/SectionIf}}
                {{Each|ColListExceptIds|sql.SetParameter("[[ColName]]", {{CamelTable}}Obj.[[ColName]]);}}

                using (var table = sql.GetTable())
                {
                    try
                    {
                        // Check for data
                        if (table != null)
                        {
                            // Should only be 1 row
                            foreach (DataRow dr in table.Rows)
                            {
                                {{SectionIf|IdIsIdentity}}
                                insertedId = dr.Field<int>("Id");
                                {{/SectionIf}}
                                retCode = dr.Field<int>("RetCode");
                            }
                        }
                        else
                        {
                            retCode = 98;
                        }
                    }
                    catch (Exception)
                    {
                        retCode = 99;
                    }
                }
            }
            {{SectionIf|IdIsIdentity}}

            // Set the inserted Id if result was success.
            if (retCode == 0)
            {
                {{Each|IdCols|{{CamelTable}}Obj.[[ColName]] = insertedId;}}
            }
            {{/SectionIf}}

            return retCode;
        }

        /// <summary>
        /// {{Table}}Update() - Updates an Entity Object
        /// </summary>
        /// <param name="cs">Connection String</param>
        /// <param name="{{CamelTable}}Obj">{{Table}} object containing data to update</param>
        /// <returns>
        ///     0 = Success
        ///     1 = Update did not occur (affected rows = 0)
        ///     98 = No results
        ///     99 = Exception during Update
        /// </returns>
        public int {{Table}}Update(string cs, {{Table}} {{CamelTable}}Obj)
        {
            int retCode = 0;

            using (Sql sql = new Sql(cs, "{{Schema}}.{{Table}}Upd"))
            {
                {{Each|ColList|sql.SetParameter("[[ColName]]", {{CamelTable}}Obj.[[ColName]]);}}

                using (var table = sql.GetTable())
                {
                    try
                    {
                        // Check for data
                        if (table != null)
                        {
                            foreach (DataRow dr in table.Rows)      // Should only be 1 row
                            {
                                retCode = dr.Field<int>("RetCode");
                            }
                        }
                        else
                        {
                            retCode = 98;
                        }
                    }
                    catch (Exception)
                    {
                        retCode = 99;
                    }
                }
            }

            return retCode;
        }

        /// <summary>
        /// {{Table}}Delete() - Deletes an Entity Object
        /// </summary>
        /// <param name="cs">Connection String</param>
        {{Each|IdCols|/// <param name="[[CamelColName]]">Id of item to retrieve</param>}}
        /// <returns>
        ///     0 = Success
        ///     1 = Delete did not occur (affected rows = 0)
        ///     98 = No results
        ///     99 = Exception during Delete
        /// </returns>
        public int {{Table}}Delete(string cs, {{CamelIdColParameters}})
        {
            int retCode = 0;

            using (Sql sql = new Sql(cs, "{{Schema}}.{{Table}}Del"))
            {
                {{Each|IdCols|sql.SetParameter("[[ColName]]", [[CamelColName]]);}}

                using (var table = sql.GetTable())
                {
                    try
                    {
                        // Check for data
                        if (table != null)
                        {
                            foreach (DataRow dr in table.Rows)      // Should only be 1 row
                            {
                                retCode = dr.Field<int>("RetCode");
                            }
                        }
                        else
                        {
                            retCode = 98;
                        }
                    }
                    catch (Exception)
                    {
                        retCode = 99;
                    }
                }
            }

            return retCode;
        }

        {{SectionIf|ActivePresent}}
        /// <summary>
        /// {{Table}}ToggleActive() - Updates the Entity by toggling the Active indicator.
        /// </summary>
        /// <param name="cs">Connection String</param>
        {{Each|IdCols|/// <param name="[[CamelColName]]">Id of item to retrieve</param>}}
        {{If|ModifiedByPresent|/// <param name="requestedBy">User requesting activity</param>}}
        /// <returns>
        ///     0 = Success
        ///     1 = Request Id does not exist
        ///     98 = No results
        ///     99 = Exception during Toggle
        /// </returns>
        public int {{Table}}ToggleActive(string cs, {{CamelIdColParameters}}{{If|ModifiedByPresent|, string requestedBy}})
        {
            int retCode = 0;

            using (Sql sql = new Sql(cs, "{{Schema}}.{{Table}}ToggleActive"))
            {
                {{Each|IdCols|sql.SetParameter("[[ColName]]", [[CamelColName]]);}}
                {{If|ModifiedByPresent|sql.SetParameter("RequestedBy", requestedBy);}}

                using (var table = sql.GetTable())
                {
                    try
                    {
                        // Check for data
                        if (table != null)
                        {
                            foreach (DataRow dr in table.Rows)      // Should only be 1 row
                            {
                                retCode = dr.Field<int>("RetCode");
                            }
                        }
                        else
                        {
                            retCode = 98;
                        }
                    }
                    catch (Exception)
                    {
                        retCode = 99;
                    }
                }
            }

            return retCode;
        }

        {{/SectionIf}}
        #endregion Public Methods

        #region Private/Protected Methods

        /// <summary>
        /// PopulateObject() - Populate an object with the supplied data.
        /// </summary>
        /// <param name="dr">Row from database</param>
        /// <param name="obj">{{Table}} Object to be populated.</param>
        protected void PopulateObject(DataRow dr, {{Table}} obj)
        {
            {{Each|ColList| obj.[[ColName]] = dr.Field<[[ColCodeType]]>("[[ColName]]");}}
        }

        #endregion Private/Protected Methods

    }
}
