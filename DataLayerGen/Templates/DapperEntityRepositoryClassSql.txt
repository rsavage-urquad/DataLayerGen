using Dapper;
using System.Data;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Linq;
using static Dapper.SqlMapper;
using System;
// TODO: Depending on Project Setup, may need to include using for Repository Interfaces and Entity Class Namespaces

namespace ===To Be Populated===
{
    /// <summary>
    /// {{Table}}Repository Class - Access methods for the {{Table}} information.
    /// </summary>
    public class {{Table}}Repository : I{{Table}}Repository
    {
        #region Properties

        private readonly IDbConnection _db;
        public string Message { get; set; }

        #endregion Properties

        #region Constructor(s)

        /// <summary>
        /// {{Table}}Repository() - Default constructor
        /// </summary>
        /// <param name="db">Injected Database Connection</param>
        public {{Table}}Repository(IDbConnection db)
        {
            _db = db;
            Message = "";
        }

        #endregion Constructor(s)

        #region Public Methods

        /// <summary>
        /// GetByIdAsync() - Retrieve the {{Table}} object by Id
        /// </summary>
        /// <param name="parameters">Dyanmic Parameters object containing the Id(s) and the @IncludeInactive value</param>
        /// <returns>{{Table}} Object</returns>
        public async Task<{{Table}}> GetByIdAsync(DynamicParameters parameters)
        {
            {{Table}}? result = null;
            string sql = @"SELECT
{{Each|ColList|[[TableAlias]][[ColName]][Last|:,]}}
FROM {{Schema}}.{{Table}}{{If|TableAliasPresent| as \{\\{\TableAlias\}\\}\}} with(nolock)
{{Each|IdCols|[First|WHERE:AND] [[TableAlias]][[ColName]] = @[[ColName]]}}
;";

            result = await _db.QuerySingleOrDefaultAsync<{{Table}}>(sql, parameters);
            return result;
        }

        /// <summary>
        /// ListAllAsync() - List of all {{Table}} Objects.
        /// </summary>
        {{SectionIf|ActivePresent}}
        /// <param name="includeInactive">Should inactive items be returned? (true/false)</param>
        {{/SectionIf}}
        /// <returns>List of Employee Objects.</returns>
        public async Task<IReadOnlyList<Employee>> ListAllAsync({{If|ActivePresent|bool includeInactive = false}})
        {
            IEnumerable<Employee> results;
            string sql = @"SELECT
{{Each|ColList|[[TableAlias]][[ColName]][Last|:,]}}
FROM {{Schema}}.{{Table}}{{If|TableAliasPresent| as \{\\{\TableAlias\}\\}\}} with(nolock)
{{SectionIf|ActivePresent}}
WHERE (
	{{If|TableAliasPresent|\{\\{\TableAlias\}\\}\.}}{{ActiveColName}} = {{ActiveValue}} OR
	@IncludeInactive = 1
)
{{/SectionIf}}
;";
            {{SectionIf|ActivePresent}}
            var parameters = new DynamicParameters();
            parameters.Add("IncludeInactive", includeInactive);

            results = await _db.QueryAsync<{{Table}}>(sql, parameters);
            {{/SectionIf}}
            {{SectionIf|ActiveNotPresent}}
            results = await _db.QueryAsync<{{Table}}>(sql);
            {{/SectionIf}}

            return results.ToList();
        }

        /// <summary>
        /// ListByFilterAsync() - List of {{Table}} Objects meeting the requested criteria.
        /// </summary>
        /// <param name="filter">Filtering clause</param>
        /// <param name="orderBy">Order by clause</param>
        /// <param name="parameters">Dyanmic Parameters object containing parameters for Filtering clause and 
        /// the @IncludeInactive value</param>
        /// <returns>List of Employee Objects meeting the filter criteria.</returns>
        public async Task<IReadOnlyList<Employee>> ListByFilterAsync(string filter, string orderBy, DynamicParameters parameters)
        {
            IEnumerable<Employee> results;
            string sql = @"SELECT
{{Each|ColList|[[TableAlias]][[ColName]][Last|:,]}}
FROM {{Schema}}.{{Table}}{{If|TableAliasPresent| as \{\\{\TableAlias\}\\}\}} with(nolock)
~~Filter~~
{{SectionIf|ActivePresent}}
~~WhereOrAnd~~ (
	{{If|TableAliasPresent|\{\\{\TableAlias\}\\}\.}}{{ActiveColName}} = {{ActiveValue}} OR
	@IncludeInactive = 1
);
{{/SectionIf}}
~~OrderBy~~;";

            sql = sql.Replace("~~Filter~~", filter);
            sql = sql.Replace("~~WhereOrAnd~~", (filter.Trim() == "") ? "WHERE" : "AND");
            sql = sql.Replace("~~OrderBy~~", orderBy);
            results = await _db.QueryAsync<{{Table}}>(sql, parameters);
            return results.ToList();
        }

        /// <summary>
        /// InsertAsync() - Inserts an {{Table}} object
        /// </summary>
        /// <param name="entity">{{Table}} Object</param>
        /// <returns>True if successful, otherwise false (Message will be populated with reason)</returns>
        public async Task<bool> InsertAsync({{Table}} entity)
        {
            bool result = true;
            string sql = @"INSERT INTO {{Schema}}.{{Table}} (
    {{SectionIf|IdIsNotIdentity}}
    {{Each|IdCols|[[ColName]],}}
    {{/SectionIf}}
    {{Each|ColListExceptIds|[[ColName]][Last|:,]}}
) VALUES (
    {{SectionIf|IdIsNotIdentity}}
    {{Each|IdCols|@[[ColName]],}}
    {{/SectionIf}}
    {{Each|ColListExceptIds|@[[ColName]][Last|:,]}}
); 
{{SectionIf|IdIsIdentity}}
SELECT CAST(SCOPE_IDENTITY() as int) as NewId;
{{/SectionIf}}
";

            try
            {
                {{If|ActivePresent|var newId = }}await _db.QuerySingleAsync<int>(sql, entity);
                {{SectionIf|IdIsIdentity}}
                {{Each|IdCols|entity.[[ColName]] = newId;}}
                {{/SectionIf}}
            }
            catch (Exception ex)
            {
                Message = ex.Message;
                result = false;
            }

            return result;
        }

        /// <summary>
        /// UpdateAsync() - Updates an {{Table}} object
        /// </summary>
        /// <param name="entity">{{Table}} object</param>
        /// <returns>True if successful, otherwise false (Message will be populated with reason)</returns>
        public async Task<bool> UpdateAsync({{Table}} entity)
        {
            string sql = @"UPDATE {{Schema}}.{{Table}} SET
{{SectionIf|IdIsNotIdentity}}
{{Each|IdCols|[[ColName]] = @[[ColName]],}}
{{/SectionIf}}
{{Each|ColListExceptIds|[[ColName]] = @[[ColName]][Last|:,]}} 
{{Each|IdCols|[First|WHERE:AND] [[ColName]] = @[[ColName]][Last|;:]}}
;";

            return await ProcessDbExecute(sql, null, entity, "No rows were updated.");
        }

        /// <summary>
        /// DeleteAsync() - Deletes an {{Table}} based on the Id
        /// </summary>
        /// <param name="parameters">Dyanmic Parameters object containing the Id(s)</param>
        /// <returns>True if successful, otherwise false (Message will be populated with reason)</returns>
        public async Task<bool> DeleteAsync(DynamicParameters parameters)
        {
            string sql = @"DELETE {{Schema}}.{{Table}}
{{Each|IdCols|[First|WHERE:AND] [[ColName]] = @[[ColName]][Last|;:]}}
";

            return await ProcessDbExecute(sql, parameters, null, "No rows were deleted.");
        }

        /// <summary>
        /// ToggleActiveAsync() - Toggles the Active Indicator for an {{Table}}
        /// </summary>
        /// <param name="parameters">Dyanmic Parameters object containing the Id(s)</param>
        /// <returns>True if successful, otherwise false (Message will be populated with reason)</returns>
        public async Task<bool> ToggleActiveAsync(DynamicParameters parameters)
        {
            string sql = @"UPDATE {{Schema}}.{{Table}} SET
{{ActiveColName}} = {{ActiveColName}} ^ 1{{If|ModifiedByPresent|,}}
{{SectionIf|ModifiedByPresent}}
{{ModifiedByColName}} = @RequestedBy
{{/SectionIf}}
{{Each|IdCols|[First|WHERE:AND] [[ColName]] = @[[ColName]][Last|;:]}}
";

            return await ProcessDbExecute(sql, parameters, null, "No rows were toggled.");
        }

        #endregion Public Methods

        #region Protected/Private Methods

        /// <summary>
        /// ProcessDbExecute() - Process a common DB Execute operatio where the "Rows Affected" information
        /// is checked
        /// </summary>
        /// <param name="sql">SQL Command</param>
        /// <param name="parameters">Dyanmic parameters for SQL Command</param>
        /// <param name="entity">Entity Object</param>
        /// <param name="noRowsAffectedMsg">Value to set Message if no row were affected</param>
        /// <returns>True if successful, otherwise false (Message will be populated with reason)</returns>
        protected async Task<bool> ProcessDbExecute(string sql, DynamicParameters? parameters, Employee? entity, string noRowsAffectedMsg)
        {
            bool result = true;
            try
            {
                int rowsAffected = (entity is null)
                    ? await _db.ExecuteAsync(sql, parameters)
                    : await _db.ExecuteAsync(sql, entity);

                if (rowsAffected == 0)
                {
                    Message = noRowsAffectedMsg;
                    result = false;
                }
            }
            catch (Exception ex)
            {
                Message = ex.Message;
                result = false;
            }
            return result;
        }

        #endregion Protected/Private Methods

    }
}
